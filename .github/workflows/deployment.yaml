name: Deployment

env:
  AR_LOCATION: eu
  REGION: europe-southwest1 # Madridoo
  RWX_ACCESS_TOKEN: ${{ secrets.RWX_ACCESS_TOKEN }}


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on: push

jobs:
  test:
    runs-on: ubuntu-20.04

    services:
      postgres:
        image: postgres:14-alpine
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres

      redis:
        image: redis:alpine
        ports: ['6379:6379']

    env:
      DB_HOST: localhost
      DB_USER: postgres
      DB_PASSWORD: postgres
      REDIS_URL: redis://localhost:6379/0
      RAILS_ENV: test
      DISABLE_SPRING: true
      CI: true

    steps:
      - uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v3.5.1
        with:
          cache: yarn

      - name: Install Yarn packages
        run: bin/yarn install --frozen-lockfile

      - name: Lint with RuboCop
        run: bin/rubocop --parallel

      - name: Run ESLint
        run: bin/yarn lint
  
      - uses: rwx-research/setup-captain@v1
      - name: Run RSpec
        run: |
          captain run \
            --suite-id errentaeus-rspec \
            --test-results tmp/rspec.json \
            -- \
            bundle exec rspec \
              --format json --out tmp/rspec.json \
              --format progress

      - name: Run Jest
        run: bin/yarn test

      - name: Setup PostgreSQL
        run: bin/rails db:create

      - name: Compile assets
        run: bin/rails assets:precompile

      - name: Check JS size limit
        run: yarn size-limit
      
      - name: Upload test results to Captain
        uses: rwx-research/upload-captain-artifact@v1
        if: always()
        continue-on-error: true
        with:
          artifacts: |
            [
              {
                "name": "RSpec",
                "path": "tmp/**/rspec.json",
                "kind": "test_results",
                "parser": "rspec_json"
              },
              {
                "name": "Jest",
                "path": "tmp/jest.json",
                "kind": "test_results",
                "parser": "jest_json"
              }
            ]
          captain-token: '${{ secrets.RWX_ACCESS_TOKEN }}'

  build_image:

    needs: test

    permissions:
      contents: 'read'
      id-token: 'write'
      
    runs-on: ubuntu-latest
    environment: gcp

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # - name: Google Auth
      #   id: auth
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     credentials_json: '${{ secrets.CP_CREDENTIALS }}'

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'
      
      - name: Authorize Docker push
        run: gcloud auth configure-docker

      - name: Build the image
        run: |
          export COMMIT_TIME=$(git show -s --format=%cI ${GITHUB_SHA})
          export COMMIT_VERSION=$(git describe --always)
          echo $GITHUB_SHA
          echo $COMMIT_TIME
          echo $COMMIT_VERSION
          docker buildx build --build-arg COMMIT_TIME --build-arg COMMIT_VERSION -t app .
      - name: Push the image tagged with version to the container registry
        run: |
          docker tag app ${{ env.AR_LOCATION }}.gcr.io/${{ secrets.PROJECT_ID }}/${{ secrets.SERVICE_NAME }}:${{ github.sha }}
          docker push ${{ env.AR_LOCATION }}.gcr.io/${{ secrets.PROJECT_ID }}/${{ secrets.SERVICE_NAME }}:${{ github.sha }}