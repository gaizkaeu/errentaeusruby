require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/api/v1/lawyer_profiles' do
  let(:lawyer_attributes) { attributes_for(:lawyer_profile) }

  let(:invalid_attributes) do
    attributes_for(:lawyer_profile, email: nil)
  end

  context 'with created lawyer profile' do
    let(:lawyer) { create(:lawyer_profile) }

    before do
      sign_in lawyer.user
    end

    describe 'GET /show' do
      it 'renders a successful response' do
        get api_v1_my_lawyer_profile_path, as: :json
        expect(response).to be_successful
      end
    end

    describe 'PATCH /update' do
      context 'with valid parameters' do
        let(:new_attributes) do
          { email: 'newemail@gmail.com' }
        end

        it 'updates the requested lawyer_profile' do
          authorized_put api_v1_my_lawyer_profile_path, params: { lawyer_profile: new_attributes }, as: :json
          expect(response).to have_http_status(:ok)
          expect(lawyer.reload.email).to eq(new_attributes[:email])
        end

        it 'renders a JSON response with the lawyer_profile' do
          authorized_put api_v1_my_lawyer_profile_path, params: { lawyer_profile: new_attributes }, as: :json
          expect(response).to have_http_status(:ok)
          expect(response.content_type).to match(a_string_including('application/json'))
        end
      end
    end

    describe 'CREATE /create' do
      it 'cannot create a new Lawyer Profile' do
        expect do
          authorized_post api_v1_my_lawyer_profile_path, params: { lawyer_profile: lawyer_attributes }, as: :json
        end.not_to change(Api::V1::LawyerProfile, :count)
      end

      it 'renders a JSON response with errors for the new lawyer_profile' do
        authorized_post api_v1_my_lawyer_profile_path, params: { lawyer_profile: invalid_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
        expect(response.body).to include('"user":["has already been taken"')
      end
    end
  end

  context 'with no lawyer profile' do
    let(:user) { create(:user) }

    before do
      sign_in user
    end

    describe 'GET /show' do
      it 'renders a successful response' do
        get api_v1_my_lawyer_profile_path, as: :json
        expect(response).not_to be_successful
      end
    end

    describe 'CREATE /create' do
      it 'creates a new Lawyer Profile' do
        expect do
          authorized_post api_v1_my_lawyer_profile_path, params: { lawyer_profile: lawyer_attributes }, as: :json
        end.to change(Api::V1::LawyerProfile, :count).by(1)
      end

      it 'renders a JSON response with the new lawyer_profile' do
        authorized_post api_v1_my_lawyer_profile_path, params: { lawyer_profile: lawyer_attributes }, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    describe 'PATCH /update' do
      context 'with valid parameters' do
        let(:new_attributes) do
          { email: 'asd@gmail.com' }
        end

        it 'returns error' do
          authorized_put api_v1_my_lawyer_profile_path, params: { lawyer_profile: new_attributes }, as: :json
          expect(response).to have_http_status(:not_found)
        end
      end
    end
  end
end
