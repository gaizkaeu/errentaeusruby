require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "Appointments" do
  # This should return the minimal set of attributes required to create a valid
  # Api::V1::Appointment. As you add validations to Api::V1::Appointment, be sure to
  # adjust the attributes here as well.

  # let(:user) {Api::V1::User.create!(email: "gaizka@gmail.com", name: "Gaizka", surname: "Gaizka", password:"gaizka123", password_confirmation: "gaizka123")}
  # let(:tax_income) do
  #   tax_income = Api::V1::TaxIncome.create!(user_id: user.id)
  #   tax_income.waiting_for_meeting_creation!
  #   tax_income
  # end
  
  let(:tax_income) {create(:tax_income)}
  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # Api::V1::AppointmentsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {}
  end

  let(:valid_attributes) do
    {tax_income_id: tax_income.id, method: "phone", phone: "688867636"}
  end

  let(:invalid_attributes) do
    {tax_income_id: 0, method: "asd", phone: "688867636"}
  end
  
  before do 
    sign_in(tax_income.user)
    tax_income.waiting_for_meeting_creation!
  end


  describe "GET /index" do
    it "renders a successful response" do
      Api::V1::Appointment.create! valid_attributes
      get api_v1_appointments_url, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      appointment = Api::V1::Appointment.create! valid_attributes
      get api_v1_appointments_url(appointment)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Api::V1::Appointment" do
        expect do
          post api_v1_appointments_url,
               params: { appointment: valid_attributes }, as: :json
        end.to change(Api::V1::Appointment, :count).by(1)
      end

      it "renders a JSON response with the new api_v1_appointment" do
        tax_income.waiting_for_meeting_creation!
        post api_v1_appointments_url,
             params: { appointment: valid_attributes }, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Api::V1::Appointment" do
        expect do
          post api_v1_appointments_url,
               params: { appointment: invalid_attributes }, as: :json
        end.not_to change(Api::V1::Appointment, :count)
      end

      it "renders a JSON response with errors for the new api_v1_appointment" do
        post api_v1_appointments_url,
             params: { appointment: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        {phone: "605705598"}
      end

      it "updates the requested api_v1_appointment" do
        appointment = Api::V1::Appointment.create! valid_attributes
        patch api_v1_appointment_url(appointment),
              params: { appointment: new_attributes }, as: :json
        appointment.reload
        expect(appointment.phone).to match(new_attributes[:phone]) 
      end

      it "renders a JSON response with the api_v1_appointment" do
        appointment = Api::V1::Appointment.create! valid_attributes
        patch api_v1_appointment_url(appointment),
              params: { appointment: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the api_v1_appointment" do
        appointment = Api::V1::Appointment.create! valid_attributes
        patch api_v1_appointment_url(appointment),
              params: { appointment: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  # describe "DELETE /destroy" do
  #   it "destroys the requested api_v1_appointment" do
  #     appointment = Api::V1::Appointment.create! valid_attributes
  #     expect {
  #       delete api_v1_appointment_url(appointment), headers: valid_headers, as: :json
  #     }.to change(Api::V1::Appointment, :count).by(-1)
  #   end
  # end
end
